#version 330 core

layout (location = 0) in vec3 aPos;   // Vertex position
layout (location = 1) in vec3 aNormal; // Vertex normal

out vec3 FragPos;   // Pass the fragment position to the fragment shader
out vec3 Normal;    // Pass the normal to the fragment shader

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

void main()
{
    // Compute the fragment position in world space
    FragPos = vec3(model * vec4(aPos, 1.0));

    // Compute the normal in world space and normalize it
    Normal = mat3(transpose(inverse(model))) * aNormal;

    // Apply model, view, projection transformations
    gl_Position = projection * view * vec4(FragPos, 1.0);
}
